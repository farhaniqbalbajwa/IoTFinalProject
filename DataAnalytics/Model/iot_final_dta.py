# -*- coding: utf-8 -*-
"""IoT_Final_DTA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1szQOV8AMtbgZwRfr-SZpsiTlFgPQHdkj
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score
import joblib


# Load data
df = pd.read_excel('query.xlsx')
print("Initial DataFrame columns:", df.columns.tolist())  # Check initial column names

# Convert all data to numeric, skip non-numeric columns for now
for col in df.columns:
    try:
        df[col] = pd.to_numeric(df[col], errors='raise')
    except ValueError:
        print(f"Skipping non-numeric column: {col}")
        continue  # Skip conversion for non-numeric columns

# Drop any rows with NaN in any column
df.dropna(inplace=True)
print("Rows after dropping NaNs:", df.shape[0])

# Define your correct features based on your dataset
corr_features = ['Pressure','Temperature', 'Humidity']  # Update this list based on actual, correct feature names
X = df[corr_features] if all(item in df.columns for item in corr_features) else pd.DataFrame()
y = df['TemperatureS2'] if 'TemperatureS2' in df.columns else pd.Series()

# Check if data is still available after selections
if not X.empty and not y.empty:
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

    # Train KNN Regressor
    knn_regressor = KNeighborsRegressor(n_neighbors=3, p=1, weights="distance")
    knn_regressor.fit(X_train, y_train)

    # Evaluate the model
    y_pred = knn_regressor.predict(X_test)
    print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
    print("RÂ² Score:", r2_score(y_test, y_pred))

    # Visualization of actual vs predicted values
    plt.figure(figsize=(10, 6))
    plt.scatter(y_test, y_pred, alpha=0.75, color='red', edgecolors='b')
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)  # Perfect prediction line
    plt.xlabel('Actual')
    plt.ylabel('Predicted')
    plt.title('Actual vs. Predicted Values')
    plt.show()

    # Export the trained model
    knn_model_columns = list(X_train)
    print(knn_model_columns)
    joblib.dump(knn_model_columns, 'knn_model_columns.pkl')
    joblib.dump(knn_regressor, 'knn_model.pkl')

    print('Model dumped successfully.')
else:
    print("No data available for training. Check your data preprocessing steps.")